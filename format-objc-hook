#!/usr/bin/env bash
# ~/.git_template.local/hooks/pre-commit
# format-objc-hook
# pre-commit hook to check if any unformatted Objective-C files would be committed. Fails the check if so, and provides instructions.
#
# Copyright 2015 Square, Inc

IFS=$'\n'
export CDPATH=""
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
source "$DIR"/lib/common-lib.sh

# Don't do anything unless a .clang-format file exists
[ -e ".clang-format" ] || exit 0

objc_files=$(objc_files_to_format "$1")
[ -z "$objc_files" ] && exit 0

function format_objc() {
  success=0
  for file in $objc_files; do
     echo "'$file'"


    difference=$("$DIR"/format-objc-file-dry-run.sh "$file" | diff "$file" - | wc -l)

    if [ $difference -gt 0 ]; then
        if [ $success -eq 0 ]; then
            echo -e "\n\033[31mFormatOne : Format and stage individual files:\033[0m"
        fi
      # This is what the dev can run to fixup an individual file
      echo "\"$DIR\"/Format-objc-file.sh '$file' && git add '$file';"

    #ÂêéÂè∞Â§ÑÁêÜ Êñá‰ª∂Â§ÑÁêÜ Êñá‰ª∂ÂØπÊØî
     $(cp "$file" "$file.format") 
     if [ ! -e "$file.format" ]; then
       $("$DIR"/Format-objc-file.sh "$file.format")
       diff -u "$file" "$file.format" 
       $(rm -f  "$file.format")
     fi

      success=1
    fi
  done
  if [ $success -gt 0 ]; then
      echo -e "\n\033[31mFormatTwo :  Format and stage all affected files:\033[0m\n\"$DIR\"/format-objc-files.sh -s"
  fi
  return $success 
}

success=0
format_objc || (echo -e "\n\033[31mTip-one :\033[0m  There were formatting issues with this commit, run theüëÜ aboveüëÜ command to fix.\n\033[31mTip-two :\033[0m  Commit anyway and skip this check by running git commit --no-verify" && success=1)

exit $success

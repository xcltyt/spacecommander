#!/usr/bin/env bash
# ~/.git_template.local/hooks/pre-commit
# format-objc-hook
# pre-commit hook to check if any unformatted Objective-C files would be committed. Fails the check if so, and provides instructions.
#
# Copyright 2015 Square, Inc

IFS=$'\n'
export CDPATH=""
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
source "$DIR"/lib/common-lib.sh
DIR_BACKUP=$( cd ~/Documents && pwd )
DIR_BACKUP=$DIR_BACKUP"/codeCheckerCache"
# Don't do anything unless a .clang-format file exists
[ -e ".clang-format" ] || exit 0

objc_files=$(objc_files_to_format "$1")
[ -z "$objc_files" ] && exit 0

function format_objc() {
  success=0
  for file in $objc_files; do

    difference=$("$DIR"/format-objc-file-dry-run.sh "$file" | diff "$file" - | wc -l)

    if [ $difference -gt 0 ]; then

      #备份
      #如果备份目录不存在，新建并复制文件过去
      if [ ! -d $DIR_BACKUP ]; then
        $(mkdir -p $DIR_BACKUP);
      fi

      if [  -d $DIR_BACKUP ]; then
        #备份目录初始化git
        cd $DIR_BACKUP && git init

        file_dir=$DIR_BACKUP"/"${file%/*}
        echo $file_dir
        #判断是否创建仿目录
        if [ ! -d $file_dir ]; then
           $(mkdir -p $file_dir);
        fi

        if [  -d $file_dir ]; then        
           file_backup=$DIR_BACKUP"/"$file
           pwd
           #回到原目录
           cd ${DIR%/*}
           $(cp  "$file" "$file_backup") 
           #备份日志
           datetime=`date "+%Y-%m-%d/%H:%M:%S"`
           echo $datetime"&"$file >>"spacecommander/code-check.log"
        fi
           cd ${DIR%/*}
       fi

      #后台处理 文件处理 文件对比
       $(cp "$file" "$file.format") 
       if [ -e "$file.format" ]; then
         $("$DIR"/Format-objc-file.sh "$file.format")
         echo -e "\n\033[32m>> FileNeedToFormat : '$file' \033[0m"

         if [ ! -d "spacecommander/diff" ]; then
            $(mkdir -p "spacecommander/diff");
         fi

         diff -c "$file" "$file.format" > "spacecommander/diff/format.diff"
         vim -M "spacecommander/diff/format.diff" < /dev/tty > /dev/tty
         # vimdiff "$file" "$file.format" < /dev/tty > /dev/tty
         $(rm -f  "$file.format")
       fi
      # if [ $success -eq 0 ]; then
          echo -e "\n\033[31m>> '$file' did not pass the code check , format it with this:\033[0m"
      # fi
      # This is what the dev can run to fixup an individual file
      echo -e "\"$DIR\"/Format-objc-file.sh '$file' && git add '$file';\n"

      success=1
    fi
  done
  if [ $success -gt 0 ]; then
      echo -e "\033[31m>> you can format all with this:\033[0m\n\"$DIR\"/format-objc-files.sh -s"
  fi
    #提交备份记录 利用git来保证备份文件的迭代
  datetime=`date "+%Y-%m-%d/%H:%M:%S"`
  cd $DIR_BACKUP && git add . && git commit -m "#Format-Backup-"${datetime}

  return $success 
}

success=0
format_objc || (echo -e "\n\033[31m>> tip-one :\033[0m  There were formatting issues with this commit, run the👆 above👆 command to fix.\n\033[31m>> tip-two :\033[0m  Commit anyway and skip this check by running git commit --no-verify\n" && success=1)

exit $success
